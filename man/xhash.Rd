% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xhash.R
\name{xhash}
\alias{xhash}
\title{Create Hash Table for Generic States}
\usage{
xhash(convfunc = function(state, ...) state, convfunc_vec = function(states,
  ...) unlist(Map(convfunc, states, ...)), default_value = NULL)
}
\arguments{
\item{convfunc}{function that converts a state to a key.
It must take a positional argument \code{state} and keyword arguments
represented by \code{...}, and returns a character.}

\item{convfunc_vec}{function for vectorized conversion from states to keys.
This function must receive a positional argument \code{states}
and keyword arguments \code{...}
and returns character vector.  By default, it vectorizes
\code{convfunc} using \code{Map}. User may specify a more efficient function
if any.}

\item{default_value}{value to be returned when a state is not recorded in
the table.}
}
\value{
\code{xhash} object
}
\description{
This function creates an \code{xhash} object, extended version of
\code{\link[hash]{hash}}.
While \code{\link[hash]{hash}} accepts only strings as indices, \code{xhash}
can deal with generic index variables, termed as "state".
}
\examples{
h <- xhash(convfunc = function(state, ...) paste0(state, collapse='-'))

# insert
h[c(1, 2, 3)] <- 100
h[matrix(1:9, nrow=3, ncol=3)] <- -5

# retrieve
h[c(1, 2, 3)]
h[matrix(1:9, nrow=3, ncol=3)]
h[1:9]          # equivalent as above, due to conversion to a same key
h[c(3, 2, 1)]   # this is undefined

# delete
h[c(1, 2, 3)] <- NULL

# vectorized operations
## insert
setvalues(h, list(1:2, 1:3), c(9, 8))
## retrieve
getvalues(h, list(1:9, 1:2, 3:1))
## delete
setvalues(h, list(1:9, 1:3), NULL)
}
\seealso{
\link{hash-ops}, \link{vectorized-hash-ops}
}
